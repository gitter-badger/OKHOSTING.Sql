using OKHOSTING.Sql.ORM.Filters;
using OKHOSTING.Sql.ORM.Operations;
using OKHOSTING.Sql.Schema;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace OKHOSTING.Sql.ORM
{
	public class DataBase : IOrmDataBase
	{
		protected readonly Dictionary<Type, object> Tables = new Dictionary<Type,object>();

		public Sql.DataBase NativeDataBase { get; set; }
		
		public SqlGeneratorBase SqlGenerator { get; set; }

		public Table<TKey, TType> Table<TKey, TType>()
		{
			Table<TKey, TType> table = null;

			if (Tables.ContainsKey(typeof(TType)))
			{
				table = (Table<TKey, TType>) Tables[typeof(TType)];
			}
			else
			{
				table = new Table<TKey, TType>();
				table.DataBase = this;
				Tables.Add(typeof(TType), table);
			}

			return table;
		}

		public MultipleKeyTable<TType> MultipleKeyTable<TType>()
		{
			MultipleKeyTable<TType> table = null;

			if (Tables.ContainsKey(typeof(TType)))
			{
				table = (MultipleKeyTable<TType>) Tables[typeof(TType)];
			}
			else
			{
				table = new MultipleKeyTable<TType>();
				table.DataBase = this;
				Tables.Add(typeof(TType), table);
			}

			return table;
		}

		IDictionary<TKey, TType> IOrmDataBase.Table<TKey, TType>() 
		{
			return this.Table<TKey, TType>();
		}

		//operations

		public int Insert(Insert insert)
		{
			Validate(insert.Values.First().Instance);

			Command sql = SqlGenerator.Insert(Parse(insert));
			int result = NativeDataBase.Execute(sql);

			//detect auto generated ID, when applicable
			var autoNumberPK = insert.Into.PrimaryKey.Where(pk => pk.Column.IsAutoNumber).SingleOrDefault();

			if (autoNumberPK != null)
			{
				var generatedId = NativeDataBase.GetScalar(SqlGenerator.LastAutogeneratedId(insert.Into.Table));
				autoNumberPK.SetValueFromColumn(insert.Values.First().Instance, generatedId);
			}

			return result;
		}

		public int Update(Update update)
		{
			Validate(update.Set.First().Instance);

			Command sql = SqlGenerator.Update(Parse(update));
			return NativeDataBase.Execute(sql);
		}

		public int Delete(Delete delete)
		{
			Command sql = SqlGenerator.Delete(Parse(delete));
			return NativeDataBase.Execute(sql);
		}

		public IEnumerable<object> Select(Select select)
		{
			Command sql = SqlGenerator.Select(Parse(select));

			using (var dataReader = NativeDataBase.GetDataReader(sql))
			{
				while (dataReader.Read())
				{
					object instance = Activator.CreateInstance(select.From.InnerType);
					ParseFromSelect(select, dataReader, instance);

					yield return instance;
				}
			}
		}

		//instance & generic operations

		/// <summary>
		/// Returns a value indicating if the specified DataObject exists on the DataBase (based on its primary key)
		/// </summary>
		/// <param name="dobj">
		/// DataObject to be searched in the DataBase
		/// </param>
		/// <returns>
		/// True if the DataObject exists, False otherwise
		/// </returns>
		public bool Exist<TType>(TType instance)
		{
			DataType dtype = instance.GetType();

			return Exist(dtype, instance);
		}

		/// <summary>
		/// Returns a value indicating if the specified DataObject exists (based on its primary key)
		/// as a specific DataType
		/// </summary>
		/// <remarks>
		/// Use this method to see if a DataObject exists in the Database as a base class.
		/// A DataObject could exist in the DataBase as a base class, but not as the final class.
		/// </remarks>
		/// <example>
		///	Class Dog inherits from Class Animal. In your Database, you have an Animal with Id = 5, 
		///	but it's not a Dog, it's just an animal. 
		///	Dog dog = new Dog();
		///	dog.Id = 5;
		///	DataBase.Current.Exist(dog);					//will return false
		///	DataBase.Current.Exist(dog, typeof(Dog));		//will return false
		///	DataBase.Current.Exist(dog, typeof(Animal));	//will return true
		/// </example>
		/// <param name="dobj">
		/// DataObject to be searched in the DataBase
		/// </param>
		/// <param name="dtype">
		/// DataType (must be a base class of dobj) that will be searched in the DataBase
		/// </param>
		/// <returns>
		/// True if the DataObject exists as the specified DataType, False otherwise
		/// </returns>
		public bool Exist<TType>(DataType dtype, TType instance)
		{
			Select<TType> select = new Select<TType>();

			select.AddMembers(dtype.PrimaryKey.ToArray());
			select.Where.Add(GetPrimaryKeyFilter(dtype, instance));

			return NativeDataBase.ExistsData(SqlGenerator.Select(Parse(select)));
		}

		public int Insert<TType>(TType instance)
		{
			DataType dtype = instance.GetType();
			int result = 0;

			foreach (DataType parent in dtype.GetBaseDataTypes().Reverse())
			{
				Insert insert = new Insert();
				insert.Into = parent;

				foreach (DataMember dmember in parent.Members)
				{
					insert.Values.Add(new MemberValue(dmember, instance));
				}

				result += Insert(insert);

				//get autoincrement id if this is the base table and on of the pk columns is autoincrement
				DataMember autoIncrementMember = parent.PrimaryKey.Where(pk => pk.Column.IsAutoNumber).FirstOrDefault();

				if (parent.BaseDataType == null && autoIncrementMember != null)
				{
					object autoincrement = Convert.ChangeType(NativeDataBase.GetScalar(SqlGenerator.LastAutogeneratedId(parent.Table)), autoIncrementMember.ReturnType);
					autoIncrementMember.SetValueFromColumn(instance, autoincrement);
				}
			}

			return result;
		}

		public int Update<TType>(TType instance)
		{
			DataType dtype = instance.GetType();
			int result = 0;

			foreach (DataType parent in dtype.GetBaseDataTypes().Reverse())
			{
				Update update = new Update();
				update.From = parent;

				//update everything but the primary key
				foreach (DataMember dmember in parent.RegularValues)
				{
					update.Set.Add(new MemberValue(dmember, instance));
				}

				update.Where.Add(GetPrimaryKeyFilter(parent, instance));

				result += Update(update);
			}

			return result;
		}

		public int Delete<TType>(TType instance)
		{
			DataType dtype = instance.GetType();
			int result = 0;

			//go from child to base class inheritance
			foreach (DataType parent in dtype.GetBaseDataTypes())
			{
				Delete delete = new Delete();
				delete.From = parent;
				delete.Where.Add(GetPrimaryKeyFilter(parent, instance));

				result += Delete(delete);
			}
			
			return result;
		}

		public bool Select<TType>(TType instance)
		{
			DataType dtype = instance.GetType();
			Select<TType> select = new Select<TType>();
			select.AddMembers(dtype.AllMembers);

			select.Where.Add(GetPrimaryKeyFilter(dtype, instance));

			Command sql = SqlGenerator.Select(Parse(select));

			using (var dataReader = NativeDataBase.GetDataReader(sql))
			{
				if (dataReader.Read())
				{
					ParseFromSelect(select, dataReader, instance);
					return true;
				}
				else
				{
					return false;
				}
			}
		}

		public IEnumerable<TType> Select<TType>(Select<TType> select)
		{
			foreach (object result in Select((Select) select))
			{
				yield return (TType) result;
			}
		}

		/// <summary>
		/// Returns all objects in a table
		/// </summary>
		public IEnumerable<TType> Select<TType>()
		{
			Select<TType> select = new Select<TType>();
			select.AddMembers(select.From.AllMembers);

			return Select(select);
		}

		/// <summary>
		/// Returns a list of objects filtered by one of the members
		/// </summary>
		/// <typeparam name="TType"></typeparam>
		/// <param name="member">DataMember that will be evaluated for filtering</param>
		/// <param name="value">Value that the DataMember must match</param>
		/// <returns>List of filtered objects</returns>
		public IEnumerable<TType> Select<TType>(DataMember<TType> member, IComparable value)
		{
			Select<TType> select = new Select<TType>();
			select.AddMembers(select.From.AllMembers);
			select.Where.Add(new ValueCompareFilter(member, value));

			return Select(select);
		}

		public IEnumerable<TType> SearchInheritedFrom<TType>(TType instance)
		{
			DataType dtype = typeof(TType);
			Command command = new Command();
			List<Tuple<DataType, Select>> selects = new List<Tuple<DataType, Select>>();

			//Crossing the DataTypes
			foreach (DataType subType in dtype.GetSubDataTypesRecursive())
			{
				Select select = new Select();
				select.From = subType;
				select.AddMembers(subType.AllMembers);
				select.Where.Add(GetPrimaryKeyFilter(subType, instance)); //Creating Primary Key filter
				//append all selects into a single command for beter performance
				Command subCommand = SqlGenerator.Select(Parse(select));
				command.Append(subCommand);

				selects.Add(new Tuple<DataType, Select>(subType, select));
			}

			using (var reader = NativeDataBase.GetDataReader(command))
			{
				foreach (var item in selects)
				{
					while (reader.Read())
					{
						TType childInstance = (TType) Activator.CreateInstance(item.Item1.InnerType);
						ParseFromSelect(item.Item2, reader, childInstance);

						yield return childInstance;
					}

					reader.NextResult();
				}
			}
		}

		public void Create<TType>()
		{
			DataType dtype = typeof(TType);
			Command sql;

			foreach (DataType parent in dtype.GetBaseDataTypes().Reverse())
			{
				if (NativeDataBase.ExistsTable(parent.Table.Name))
				{
					continue;
				}

				sql = SqlGenerator.Create(parent.Table);
				NativeDataBase.Execute(sql);

				foreach (Sql.Schema.Index index in parent.Table.Indexes)
				{
					sql = SqlGenerator.Create(index);
					NativeDataBase.Execute(sql);
				}

				foreach (Sql.Schema.ForeignKey fk in parent.Table.ForeignKeys)
				{
					sql = SqlGenerator.Create(fk);
					NativeDataBase.Execute(sql);
				}
			}
		}

		public void Drop<TType>()
		{
			DataType dtype = typeof(TType);
			Command sql;

			if (!NativeDataBase.ExistsTable(dtype.Table.Name))
			{
				return;
			}

			foreach (Sql.Schema.Index index in dtype.Table.Indexes)
			{
				sql = SqlGenerator.Drop(index);
				NativeDataBase.Execute(sql);
			}

			foreach (Sql.Schema.ForeignKey fk in dtype.Table.ForeignKeys)
			{
				sql = SqlGenerator.Drop(fk);
				NativeDataBase.Execute(sql);
			}

			sql = SqlGenerator.Drop(dtype.Table);
			NativeDataBase.Execute(sql);
		}

		public void Validate(object obj)
		{
			DataType dtype = obj.GetType();
			List<Validators.ValidationError> errors = new List<Validators.ValidationError>();

			foreach (var dmember in dtype.Members)
			{
				foreach (var validator in dmember.Validators)
				{
					var error = validator.Validate(obj);

					if (error != null)
					{
						errors.Add(error);
					}
				}
			}

			if (errors.Count > 0)
			{
				throw new Validators.ValidationException(errors, obj);
			}
		}
		
		protected void ParseFromSelect<T>(Select select, System.Data.IDataReader dataReader, T instance)
		{
			foreach (SelectMember member in select.Members)
			{
				if (!DataMember.IsReadOnly(member.Member.FinalMemberInfo))
				{
					object value = string.IsNullOrWhiteSpace(member.Alias) ? dataReader[member.Member.Column.Name] : dataReader[member.Alias];
					member.Member.SetValueFromColumn(instance, value);
				}
			}

			foreach (SelectJoin join in select.Joins)
			{
				foreach (SelectMember member in join.Members)
				{
					if (!DataMember.IsReadOnly(member.Member.FinalMemberInfo))
					{
						string expression = member.Alias.Replace('_', '.');
						object value = string.IsNullOrWhiteSpace(member.Alias) ? dataReader[member.Member.Column.Name] : dataReader[member.Alias];

						if (member.Member.Converter != null)
						{
							value = member.Member.Converter.ColumnToMember(value);
						}

						DataMember.SetValue(expression, instance, value);
					}
				}
			}
		}

		#region Filter parsing

		protected Sql.Filters.FilterBase Parse(FilterBase filter)
		{
			//Validating if there are filters defined
			if (filter == null) return null;

			if (filter is CustomFilter) return Parse((CustomFilter)filter);
			if (filter is InFilter) return Parse((InFilter)filter);
			if (filter is LikeFilter) return Parse((LikeFilter)filter);
			if (filter is RangeFilter) return Parse((RangeFilter)filter);
			if (filter is MemberCompareFilter) return Parse((MemberCompareFilter)filter);
			if (filter is ValueCompareFilter) return Parse((ValueCompareFilter)filter);
			if (filter is AndFilter) return Parse((AndFilter)filter);
			if (filter is OrFilter) return Parse((OrFilter)filter);

			throw new ArgumentOutOfRangeException("filter");
		}

		protected Sql.Filters.CustomFilter Parse(CustomFilter filter)
		{
			return new Sql.Filters.CustomFilter()
			{
				Filter = filter.Filter,
			};
		}

		protected Sql.Filters.InFilter Parse(InFilter filter)
		{
			var native = new Sql.Filters.InFilter();
			native.Column = filter.Member.Column;
			native.CaseSensitive = filter.CaseSensitive;
			native.TableAlias = filter.TypeAlias;

			foreach (IComparable v in filter.Values)
			{
				IComparable converted;

				if (filter.Member.Converter != null)
				{
					converted = (IComparable) filter.Member.Converter.MemberToColumn(v);
				}
				else
				{
					converted = v;
				}

				native.Values.Add(converted);
			}

			return native;
		}

		protected Sql.Filters.LikeFilter Parse(LikeFilter filter)
		{
			string pattern;

			if (filter.Member.Converter != null)
			{
				pattern = (string) filter.Member.Converter.MemberToColumn(filter.Pattern);
			}
			else
			{
				pattern = filter.Pattern;
			}

			return new Sql.Filters.LikeFilter()
			{
				Column = filter.Member.Column,
				Pattern = filter.Pattern,
				CaseSensitive = filter.CaseSensitive,
				TableAlias = filter.TypeAlias
			};
		}

		protected Sql.Filters.RangeFilter Parse(RangeFilter filter)
		{
			IComparable minValue, maxValue;

			if (filter.Member.Converter != null)
			{
				minValue = (IComparable)filter.Member.Converter.MemberToColumn(filter.MinValue);
				maxValue = (IComparable)filter.Member.Converter.MemberToColumn(filter.MaxValue);
			}
			else
			{
				minValue = filter.MinValue;
				maxValue = filter.MaxValue;
			}

			return new Sql.Filters.RangeFilter()
			{
				Column = filter.Member.Column,
				MinValue = minValue,
				MaxValue = maxValue,
				TableAlias = filter.TypeAlias,
			};
		}

		protected Sql.Filters.ColumnCompareFilter Parse(MemberCompareFilter filter)
		{
			return new Sql.Filters.ColumnCompareFilter()
			{
				Column = filter.Member.Column, 
				ColumnToCompare = filter.MemberToCompare.Column,
				Operator = filter.Operator,
				TableAlias = filter.TypeAlias,
				ColumnToCompareTableAlias = filter.MemberToCompareTypeAlias
			};
		}

		protected Sql.Filters.ValueCompareFilter Parse(ValueCompareFilter filter)
		{
			IComparable value;

			if (filter.Member.Converter != null)
			{
				value = (IComparable)filter.Member.Converter.MemberToColumn(filter.ValueToCompare);
			}
			else
			{
				value = filter.ValueToCompare;
			}

			return new Sql.Filters.ValueCompareFilter()
			{
				Column = filter.Member.Column,
				ValueToCompare = value,
				Operator = filter.Operator,
				TableAlias = filter.TypeAlias
			};
		}

		protected Sql.Filters.AndFilter Parse(AndFilter filter)
		{
			var native = new Sql.Filters.AndFilter();

			foreach (FilterBase f in filter.InnerFilters)
			{
				native.InnerFilters.Add(Parse(f));
			}

			return native;
		}

		protected Sql.Filters.OrFilter Parse(OrFilter filter)
		{
			var native = new Sql.Filters.OrFilter();

			foreach (FilterBase f in filter.InnerFilters)
			{
				native.InnerFilters.Add(Parse(f));
			}

			return native;
		}

		#endregion

		#region Operation parsing

		protected Sql.Operations.Insert Parse(Insert insert)
		{
			if (insert == null)
			{
				return null;
			}

			var native = new OKHOSTING.Sql.Operations.Insert();
			native.Into = insert.Into.Table;

			foreach (MemberValue mvalue in insert.Values)
			{
				native.Values.Add(new Sql.Operations.ColumnValue(mvalue.DataMember.Column, mvalue.ValueForColumn));
			}

			return native;
		}

		protected Sql.Operations.Update Parse(Update update)
		{
			if (update == null)
			{
				return null;
			}
			
			var native = new OKHOSTING.Sql.Operations.Update();
			native.From = update.From.Table;

			foreach (MemberValue mvalue in update.Set)
			{
				native.Set.Add(new Sql.Operations.ColumnValue(mvalue.DataMember.Column, mvalue.ValueForColumn));
			}

			foreach (Filters.FilterBase filter in update.Where)
			{
				native.Where.Add(Parse(filter));
			}

			return native;
		}

		protected Sql.Operations.Delete Parse(Delete delete)
		{
			if (delete == null)
			{
				return null;
			}
			
			var native = new OKHOSTING.Sql.Operations.Delete();
			native.From = delete.From.Table;

			foreach (Filters.FilterBase filter in delete.Where)
			{
				native.Where.Add(Parse(filter));
			}

			return native;
		}

		protected Sql.Operations.Select Parse(Select select)
		{
			if (select == null)
			{
				return null;
			}
			
			if (select is SelectAggregate)
			{
				return Parse((SelectAggregate)select);
			}

			return Parse(select, new OKHOSTING.Sql.Operations.Select());
		}

		protected Sql.Operations.SelectAggregate Parse(SelectAggregate select)
		{
			if (select == null)
			{
				return null;
			}
			
			var native = (OKHOSTING.Sql.Operations.SelectAggregate)Parse(select, new OKHOSTING.Sql.Operations.SelectAggregate());

			foreach (SelectAggregateMember agregateMember in select.AggregateMembers)
			{
				native.AggregateColumns.Add(Parse(agregateMember));
			}

			foreach (DataMember groupBy in select.GroupBy)
			{
				native.GroupBy.Add(groupBy.Column);
			}

			return native;
		}

		protected Sql.Operations.SelectAggregateColumn Parse(SelectAggregateMember aggregateMember)
		{
			return new Sql.Operations.SelectAggregateColumn(aggregateMember.Member.Column, aggregateMember.AggregateFunction, aggregateMember.Alias, aggregateMember.Distinct);
		}

		protected Sql.Operations.OrderBy Parse(OrderBy orderBy)
		{
			if (orderBy == null)
			{
				return null;
			}
			
			var native = new OKHOSTING.Sql.Operations.OrderBy();
			native.Column = orderBy.Member.Column;
			native.Direction = orderBy.Direction;

			return native;
		}

		protected Sql.Operations.SelectLimit Parse(SelectLimit limit)
		{
			if (limit == null)
			{
				return null;
			}

			var native = new OKHOSTING.Sql.Operations.SelectLimit();
			native.From = limit.From;
			native.To = limit.To;

			return native;
		}

		protected Sql.Operations.SelectJoin Parse(SelectJoin join)
		{
			if (join == null)
			{
				return null;
			}
			
			var native = new OKHOSTING.Sql.Operations.SelectJoin();
			native.Table = join.Type.Table;
			native.JoinType = join.JoinType;
			native.Alias = join.Alias;

			foreach (SelectMember selectMember in join.Members)
			{
				native.Columns.Add(new Sql.Operations.SelectColumn(selectMember.Member.Column, selectMember.Alias));
			}

			foreach (Filters.FilterBase filter in join.On)
			{
				native.On.Add(Parse(filter));
			}

			return native;
		}

		protected Sql.Operations.Select Parse(Select select, Sql.Operations.Select native)
		{
			if (select == null)
			{
				return null;
			}

			if (native == null)
			{
				throw new ArgumentNullException("native");
			}
			
			native.From = select.From.Table;
			native.Limit = Parse(select.Limit);
			
			if (select.Members.Count == 0)
			{
				select.AddMembers(select.From.AllMembers);
			}

			foreach (SelectMember selectMember in select.Members)
			{
				native.Columns.Add(new Sql.Operations.SelectColumn(selectMember.Member.Column, selectMember.Alias));
			}

			foreach (SelectJoin join in select.Joins)
			{
				native.Joins.Add(Parse(join));
			}

			foreach (Filters.FilterBase filter in select.Where)
			{
				native.Where.Add(Parse(filter));
			}

			foreach (OrderBy orderBy in select.OrderBy)
			{
				native.OrderBy.Add(Parse(orderBy));
			}

			return native;
		}

		#endregion

		/// <summary>
		/// A default database that will be used from any places and that should be initialized at the very beginning of the app
		/// </summary>
		public static DataBase Default { get; set; }

		protected Filters.FilterBase GetPrimaryKeyFilter<TType>(DataType dtype, TType instance)
		{
			Filters.AndFilter filter = new Filters.AndFilter();
			var primaryKeys = dtype.PrimaryKey.ToList();

			for (int i = 0; i < primaryKeys.Count; i++)
			{
				filter.InnerFilters.Add(new Filters.ValueCompareFilter()
				{
					Member = primaryKeys[i],
					ValueToCompare = (IComparable) primaryKeys[i].GetValue(instance),
					Operator = Core.Data.CompareOperator.Equal,
				});
			}

			return filter;
		}
	}
}