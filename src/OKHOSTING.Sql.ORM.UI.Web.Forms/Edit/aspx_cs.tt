﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)/bin/debug/OKHOSTING.Core.dll" #>
<#@ assembly name="$(ProjectDir)/bin/debug/OKHOSTING.Sql.ORM.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="OKHOSTING.Sql.ORM" #>
<#@ import namespace="OKHOSTING.Core.Data" #>
<#@ import namespace="OKHOSTING.Core.Data.Validation" #>
<#@ parameter name="dtype" type="OKHOSTING.Sql.ORM.DataType" #> 
using System;
using OKHOSTING.Sql.ORM;
using <#= dtype.InnerType.Namespace #>;

namespace <#= dtype.InnerType.Namespace #>.UI.WebForms.<#= dtype.InnerType.Name #>
{
	protected <#= dtype.InnerType.Name #> Instance;

	public partial class Edit : System.Web.UI.Page
	{
		
		protected void Page_Load(object sender, EventArgs e)
		{
			Instance = new <#= dtype.InnerType.Name #>();
			var dtype = DataType<<#= dtype.InnerType.Name #>>.GetMap();
			
			<#
			foreach(var dmember in dtype.PrimaryKey)
			{
			#>
				Instance.<#= dmember.Member.Expression #> = (<#= dmember.Member.ReturnType.FullName #>) Core.Data.Converter.ChangeType<<#= dmember.Member.ReturnType.FullName #>>(Request.QueryString["<#= dmember.Member.Expression #>"]);
			<#
			}
			#>

			//load data from database
			DataBase.Default.Select(Instance);

			if(IsPostBack)
			{
				return;
			}

			//set control values on the first load
			<#
			foreach (System.Reflection.MemberInfo member in dtype.AllMemberInfos)
			{
				Type returnType = MemberExpression.GetReturnType(member);

				if (dtype.IsForeignKey(member))
				{
				#>
					string current<#= member.Name #>String = Serializer.ToString(Instance);
					foreach (var obj in DataBase.Default.Select<<#= returnType.Name #>>())
					{
						var item = new ListItem(obj.ToString(), Serializer.ToString(obj));
						
						if (item.Value == current<#= member.Name #>String)
						{
							item.Selected = true;
						}

						ctr<#= member.Name #>.Items.Add(item)
					}

					ctr<#= member.Name #>.DataBind();
				<#
				}
				else if (returnType.IsEnum)
				{
				#>
					foreach (string name Enum.GetNames(returnType))
					{
						ctr<#= member.Name #>.Items.Add(name);
					}
				<#
				}
				else if (returnType == typeof(bool))
				{
				#>
					ctr<#= member.Name  #>.Checked = Instance.<#= member.Name #>;
				<#
				}
				else if (returnType == typeof(DateTime))
				{
				#>
					ctr<#= member.Name  #>.Text = Instance.<#= member.Name #>.ToString("dd-MM-yyyy hh:mm");
				<#
				}
				else if (OKHOSTING.Core.Extensions.TypeExtensions.IsNumeric(returnType))
				{
				#>
					ctr<#= member.Name  #>.Text = Instance.<#= member.Name #>.ToString();
				<#
				}
				else if (returnType == typeof(string))
				{
				#>
					ctr<#= member.Name  #>.Text = Instance.<#= member.Name #>;
				<#
				}
				else
				{
				#>
					<asp:TextBox runat="server" ID="ctr<#= member.Name  #>"></asp:TextBox>
				<#
				}
			}
			#>
		}

		protected void cmdSave_Click(object sender, EventArgs e)
		{
			<# 
			foreach (System.Reflection.MemberInfo member in dtype.AllMemberInfos)
			{
				Type returnType = MemberExpression.GetReturnType(member);

				if(dtype.IsForeignKey(member))
				{
				#>
					Instance.<#= member.Name #> = Serializer.ToInstance(<#= member.Name  #>.SelectedValue);
				<#
				}
				else if(returnType.IsEnum)
				{
				#>
					<asp:DropDownList runat="server" id="ctr<#= member.Name  #>"></asp:DropDownList>
				<#
				}
				else if(returnType == typeof(bool))
				{
				#>
					Instance.<#= member.Name #> = ctr<#= member.Name  #>.Checked;
				<#
				}
				else if(returnType == typeof(DateTime))
				{
				#>
					<asp:TextBox TextMode="DateTime" runat="server" ID="ctr<#= member.Name  #>"></asp:TextBox>
				<#
				}
				else if(OKHOSTING.Core.Extensions.TypeExtensions.IsNumeric(returnType))
				{
				#>
					<asp:TextBox TextMode="Number" runat="server" ID="ctr<#= member.Name  #>"></asp:TextBox>
				<#
				}
				else if(returnType == typeof(string))
				{
				#>
					Instance.<#= member.Name #> = ctr<#= member.Name  #>.Text;
				<#
				}
				else
				{
				#>
					Instance.<#= member.Name #> = ctr<#= member.Name  #>.Text;
				<#
				}
			}
			#>
			
			DataBase.Default.Update(Instance);
		}
	}
}